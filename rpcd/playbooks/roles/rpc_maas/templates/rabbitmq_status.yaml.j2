type: agent.plugin
label: rabbitmq_status--{{ ansible_hostname }}
disabled    : false
period      : "{{ maas_check_period }}"
timeout     : "{{ maas_check_timeout }}"
details     :
    file    : rabbitmq_status.py
    args    : ["-H", "{{ ansible_ssh_host }}", "-n", "{{ inventory_hostname.split('.')[0] }}", "-U", "{{ maas_rabbitmq_user }}", "-p", "{{ maas_rabbitmq_password }}"]
alarms      :
    rabbitmq_disk_free_alarm_status :
        label                   : rabbitmq_disk_free_alarm_status--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["rabbitmq_disk_free_alarm_status"] != 1) {
                return new AlarmStatus(CRITICAL, "rabbitmq_disk_free_alarm_status triggered");
            }

    rabbitmq_mem_alarm_status :
        label                   : rabbitmq_mem_alarm_status--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["rabbitmq_mem_alarm_status"] != 1) {
                return new AlarmStatus(CRITICAL, "rabbitmq_mem_alarm_status triggered");
            }

    rabbitmq_max_channels_per_conn :
        label                   : rabbitmq_max_channels_per_conn--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["rabbitmq_max_channels_per_conn"] > {{ rabbitmq_max_channels_per_con_threshold }}) {
                return new AlarmStatus(CRITICAL, "Detected RabbitMQ connections with > {{ rabbitmq_max_channels_per_con_threshold }} channels, check RabbitMQ and all Openstack consumers");
            }

type: agent.plugin
label: rabbitmq_status--{{ ansible_hostname }}
disabled    : false
period      : "{{ maas_check_period }}"
timeout     : "{{ maas_check_timeout }}"
details     :
    file    : run_plugin_in_venv.sh
    args    : ["{{ maas_plugin_dir }}rabbitmq_status.py", "-H", "{{ ansible_ssh_host }}", "-n", "{{ ansible_hostname.split('.')[0] }}", "-U", "{{ maas_rabbitmq_user }}", "-p", "{{ maas_rabbitmq_password }}"]
alarms      :
    rabbitmq_disk_free_alarm_status :
        label                   : rabbitmq_disk_free_alarm_status--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        disabled                : {{ (('rabbitmq_disk_free_alarm_status--'+ansible_hostname) | match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["rabbitmq_disk_free_alarm_status"] != 1) {
                return new AlarmStatus(CRITICAL, "rabbitmq_disk_free_alarm_status triggered");
            }

    rabbitmq_mem_alarm_status :
        label                   : rabbitmq_mem_alarm_status--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        disabled                : {{ (('rabbitmq_disk_free_alarm_status--'+ansible_hostname) | match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["rabbitmq_mem_alarm_status"] != 1) {
                return new AlarmStatus(CRITICAL, "rabbitmq_mem_alarm_status triggered");
            }

    rabbitmq_max_channels_per_conn :
        label                   : rabbitmq_max_channels_per_conn--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        disabled                : {{ (('rabbitmq_max_channels_per_conn--'+ansible_hostname) | match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["rabbitmq_max_channels_per_conn"] > {{ rabbitmq_max_channels_per_con_threshold }}) {
                return new AlarmStatus(CRITICAL, "Detected RabbitMQ connections with > {{ rabbitmq_max_channels_per_con_threshold }} channels, check RabbitMQ and all Openstack consumers");
            }

    rabbitmq_fd_used_alarm_status :
        label                   : rabbitmq_fd_used_alarm_status-{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        disabled                : {{ (('rabbitmq_fd_used_alarm_status--'+ansible_hostname) | match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (percentage(metric["rabbitmq_fd_used"],metric["rabbitmq_fd_total"]) >= {{ rabbitmq_fd_used_threshold }}) {
                return new AlarmStatus(CRITICAL, "RabbitMQ file descriptors is reaching configured limit. Currently above {{ rabbitmq_fd_used_threshold }} % used");
            }

    rabbitmq_proc_used_alarm_status :
        label                   : rabbitmq_proc_used_alarm_status--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        disabled                : {{ (('rabbitmq_proc_used_alarm_status--'+ansible_hostname) | match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (percentage(metric["rabbitmq_proc_used"],metric["rabbitmq_proc_total"]) >= {{ rabbitmq_proc_used_threshold }}) {
                return new AlarmStatus(CRITICAL, "RabbitMQ processes is reaching configured limit. Currently above {{ rabbitmq_proc_used_threshold }} % used");
            }

    rabbitmq_socket_used_alarm_status :
        label                   : rabbitmq_socket_used_alarm_status--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        disabled                : {{ (('rabbitmq_socket_used_alarm_status--'+ansible_hostname) | match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (percentage(metric["rabbitmq_sockets_used"],metric["rabbitmq_sockets_total"]) >= {{ rabbitmq_socket_used_threshold }}) {
                return new AlarmStatus(CRITICAL, "RabbitMQ sockets is reaching configured limit. Currently above {{ rabbitmq_socket_used_threshold }} % used");
            }
    rabbitmq_msgs_excl_notifications :
        label                   : rabbitmq_msgs_excl_notifications--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        disabled                : {{ (('rabbitmq_msgs_excl_notifications--'+ansible_hostname) | match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (metric["rabbitmq_msgs_excl_notifications"] > {{ rabbitmq_queued_messages_excluding_notifications_threshold }} ) {
                return new AlarmStatus(CRITICAL, "RabbitMQ sum of queued messages excluding notifications queues is reaching configured limit. Currently above {{ rabbitmq_queued_messages_excluding_notifications_threshold }}");
            }
    rabbitmq_qgrowth_excl_notifications :
        label                   : rabbitmq_qgrowth_excl_notifications--{{ ansible_hostname }}
        notification_plan_id    : "{{ maas_notification_plan }}"
        disabled                : {{ (('rabbitmq_qgrowth_excl_notifications--'+ansible_hostname) | match(maas_excluded_alarms_regex)) | ternary('true', 'false') }}
        criteria                : |
            :set consecutiveCount={{ maas_alarm_local_consecutive_count }}
            if (rate(metric["rabbitmq_msgs_excl_notifications"]) > {{rabbitmq_queue_growth_rate_threshold / maas_check_period}}) {
                return new AlarmStatus(CRITICAL, "RabbitMQ Queue growth rate is above configured threshold. Currently above {{ rabbitmq_queue_growth_rate_threshold }}");
            }

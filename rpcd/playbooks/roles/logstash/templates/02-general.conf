filter {
  #---------------------------------------------------------------------------
  # Parse and tag openstack logs
  #
  grok {
    match => { "@message" => "%{TIMESTAMP_ISO8601:os_timestamp} %{POSINT:os_program_pid} %{AUDITLOGLEVEL:os_level} %{OPENSTACK_FUNCTION:openstack_function} %{OPENSTACK_CODE:openstack_code} %{GREEDYDATA:openstack_message}" }
    remove_tag => [ "_grokparsefailure" ]
    add_tag => [ "openstack" ]
  }
  #---------------------------------------------------------------------------
  # Parse and tag syslog logs
  # i.e.:
  # 1) Nov 10 23:18:55 nosthame proxy-server: User: test uses token AUTH_tkc9512a6c98bb4ccf84e17e453347ebf8 (trans_id tx7872ea1e11eb48d989735-00546147df)
  # 2) Jan  8 11:31:15 aio1_swift_proxy_container-cfcbc099 proxy-server: 172.29.237.150 172.29.236.100 08/Jan/2015/11/31/15 GET /v1/AUTH_648fa418490d41c6ab9b45ad1ca7918d%3Fformat%3Djson%26limit%3D1001 HTTP/1.0 200 - python-swiftclient-2.2.0 5cf068b1df774293... - 2 - tx5e26af272b6e4ce3950de-0054ae6a83 - 0.1823 - - 1420716675.014713049 1420716675.197021008
  #
  grok {
    match => { "@message" => "^%{SYSLOGTIMESTAMP:os_timestamp} (?:%{SYSLOGFACILITY} )?%{DATA:@source_host} %{DATA:@fields.program}(?:\[%{POSINT:@fields.processid}\])?: %{GREEDYDATA:openstack_message}" }
    add_tag => [ "syslog" ]
    overwrite => [ "os_timestamp", "@source_host", "@fields[program]", "@fields[processid]" ]
    remove_tag => [ "_grokparsefailure" ]
    tag_on_failure => []
  }
  if "syslog" in [tags] {
    mutate {
      add_field => {
         "os_program" => "%{@source_host}_%{@fields.program}"
         "os_level" => "%{@fields[severity]}"
      }
    }
  }
  #---------------------------------------------------------------------------
  # Populate the os_program field using the container name, if applicable.
  #
  grok {
    match => { "@fields[program]" => "%{CONTAINER_STRIP:os_program}" }
    overwrite => [ "os_program" ]
    remove_tag => [ "_grokparsefailure" ]
    tag_on_failure => []
  }
  # cater for nova-compute hosts
  if "openstack" in [tags] and ![os_program] {
    mutate {
      add_field => {
        "os_program" => "%{@fields[program]}"
      }
    }
  }
  #---------------------------------------------------------------------------
  # If none of the above worked, treat it generically
  #
  if "_grokparsefailure" in [tags] {
    mutate {
      add_field => {
        "os_program" => "%{@source_host}_%{@fields[program]}"
        "openstack_message" => "%{@message}"
        "os_level" => "%{@fields[severity]}"
      }
      add_tag => [ "infrastructure" ]
      remove_tag => [ "_grokparsefailure" ]
    }
  }
  #---------------------------------------------------------------------------
  # If it's a message from rsyslog specifically, override some of the data
  # as rsyslog tends to report program names like rsyslog0 and rsyslog-2359.
  # FIXME (this doesn't seem to do the os_program mutation properly for some reason)
  if [os_program] =~ /rsyslogd/ {
    mutate {
      replace => [ "os_program", "%{@source_host}_rsyslogd" ]
      replace => [ "os_level", "%{@fields[severity]}" ]
    }
  }
}

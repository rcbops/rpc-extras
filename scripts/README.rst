Misc. scripts
=============

These scripts are used for many different purposes throughout RPCO.
Below is a description of all of the scripts in this directory.

alarmparser.py
--------------

alarmparser.py is used by the rpc-maas-tool.py script to check the MaaS
alarm syntax on each check file in a system. This file was generated by
Waxeye Parser Generator and should not be modified.

bootstrap-aio.sh
----------------

Used by deploy.sh to deploy All-In-One deployments for dev and gating purposes.
This script sets some AIO specific variables for the bootstrap role, then runs
the bootstrap-aio.yml playbook.

bootstrap-aio.yml
-----------------

A playbook that bootstraps a host for an All-In-One deployment. This playbook
includes the upstream OSA [bootstrap-aio.yml](https://github.com/openstack/openstack-ansible/blob/master/tests/bootstrap-aio.yml) playbook, sets OSA configurations, and RPCO configurations.
This playbook uses the ``DEPLOY_*`` variables defined in the ``functions.sh`` script to
determine what services to deploy. At the time of this writing, there are two scenarios
for as to what services are deployed:

* The swift scenario, which deploys all of the basic openstack services, along with swift


checksha.py
-----------

This helper script checks to see if the supplied commit sha is contained
in a specific wheel of a project i.e. neutron

deploy-rpc-playbook.sh
----------------------

This script is invoked by deploy.sh, and runs the RPCO specific
playbooks using the run\_ansible function implemented in functions.sh

deploy.sh
---------

By far the most used and important script in this directory. The
deploy.sh script is used to deploy RPCO with certain features turned on
or off. These are toggled via environment variables described
`here <https://github.com/rcbops/rpc-openstack/tree/master#environment-variables-for-deploysh>`__.

These deploy variables are defined in the [``functions.sh``](https://github.com/rcbops/rpc-openstack/blob/master/scripts/functions.sh#L19) script, which
is then sourced in ``deploy.sh`` to make them available.


f5-config.py
------------

The f5-config.py script is used to generate f5 load balancer commands to
create the necessary components on the f5 for RPCO. This includes
creating the virtual servers, node pools, monitors, and more.

This script is used by the `LEM
f5\_deploy.sh <https://github.com/rcbops/rpc_lem/blob/master/lem-aide/user-tools/f5_deploy.sh>`__
script to assist deployers with automatically configuring the f5 in the
LEM labs.

To add a service to the f5-config.py script, an entry must be added to
the
`MONITORS <https://github.com/rcbops/rpc-openstack/blob/master/scripts/f5-config.py#L54>`__
list and
`POOL\_PARTS <https://github.com/rcbops/rpc-openstack/blob/master/scripts/f5-config.py#L173>`__
dictionary for each service that your adding.

f5-monitor.sh
-------------

Used to build MaaS remote checks for the external endpoints on the f5

functions.sh
------------

Functions that are used by the deployment scripts(deploy.sh or
deploy-rpc-playbook.sh). This file is sourced to bring in the functions
implemented in this file.

linting-ansible.sh
------------------

Is used by our tox tests, which are run by the travis ci, to check the
syntax and perform linting checks on the playbooks in RPCO. This script
is invoked
`here <https://github.com/rcbops/rpc-openstack/blob/master/tox.ini#L50>`__

linting-bashate.sh
------------------

Is used by our tox tests, which are run by the travis ci, to check the
syntax and peform linting checks on the bash scripts used in RPCO. This
script is invoked
`here <https://github.com/rcbops/rpc-openstack/blob/master/tox.ini#L43>`__

linting-pep8.sh
---------------

Is used by our tox tests, which are run by the travis ci, to check the
python scripts used in RPCO are pep8 compliant. This script is invoked
`here <https://github.com/rcbops/rpc-openstack/blob/master/tox.ini#L39>`__

migrate-yaml.py
---------------

Is used to migrate variable files from the old structure used in the
liberty release, to the new structure introduced in the Mitaka release.
This script is only meant to be used for upgrading a Liberty release to
Mitaka. For usage, please see
https://pages.github.rackspace.com/rpc-internal/docs-rpc/rpc-upgrade-internal/rpc-upgrade-v12-v13-perform.html#migrate-variables

release.py
----------

Used for releasing patch releases and release candidates after the
first. For usage, please see
https://github.com/rcbops/rpc-openstack/blob/master/RELEASING.md.

rpc-maas-tool.py
----------------

This script is used by the verify-maas.yml playbook to verify MaaS
checks and alarms are working properly. This script can perform remote
API checks, or local checks. The remote API checks verify the MaaS
checks and alarms against the MaaS remote service. The local checks
perform the following locally:

-  Execute the command defined in each check and verify it's return code
-  Compile the alarm criteria and check for syntax
-  Check the metrics required by the alarm criteria aginst the metrics
   produced by executing the check commands.

test\_release.py
----------------

This script contains unit tests for the release.py script

update-yaml.py
--------------

This script takes in two arguments, a base file and an override file,
then merges the two together and removes any duplicates.

run_tempest.yml
---------------

This playbook includes the upstream os-tempest-install.yml playbook, then
executes tempests tests.

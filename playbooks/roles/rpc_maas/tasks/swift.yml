---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Setup Swift Server healthchecks
- include: local_setup.yml
  vars:
    storage_bridge: "{{ 'ansible_' + swift.storage_network|replace('-', '_') }}"
    storage_address: "{{ hostvars[inventory_hostname][storage_bridge]['ipv4']['address'] }}"
    check_name: swift_object_server_check
    check_details: file=service_api_local_check.py,args=swift_object_server,args=--path,args=/healthcheck,args={{ storage_address | default(container_address) }},args=6000
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'swift_object_server_api_local_status', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["swift_object_server_api_local_status"] != 1) { return new AlarmStatus(CRITICAL, "API unavailable"); }' }
  user: root
  when: >
    inventory_hostname in groups['swift_hosts']

- include: local_setup.yml
  vars:
    storage_bridge: "{{ 'ansible_' + swift.storage_network|replace('-', '_') }}"
    storage_address: "{{ hostvars[inventory_hostname][storage_bridge]['ipv4']['address'] }}"
    check_name: swift_container_server_check
    check_details: file=service_api_local_check.py,args=swift_container_server,args=--path,args=/healthcheck,args={{ storage_address | default(container_address) }},args=6001
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'swift_container_server_api_local_status', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["swift_container_server_api_local_status"] != 1) { return new AlarmStatus(CRITICAL, "API unavailable"); }' }
  user: root
  when: >
    inventory_hostname in groups['swift_hosts']

- include: local_setup.yml
  vars:
    storage_bridge: "{{ 'ansible_' + swift.storage_network|replace('-', '_') }}"
    storage_address: "{{ hostvars[inventory_hostname][storage_bridge]['ipv4']['address'] }}"
    check_name: swift_account_server_check
    check_details: file=service_api_local_check.py,args=swift_account_server,args=--path,args=/healthcheck,args={{ storage_address | default(container_address) }},args=6002
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'swift_account_server_api_local_status', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["swift_account_server_api_local_status"] != 1) { return new AlarmStatus(CRITICAL, "API unavailable"); }' }
  user: root
  when: >
    inventory_hostname in groups['swift_hosts']

- include: local_setup.yml
  vars:
    check_name: swift_proxy_server_check
    check_details: file=service_api_local_check.py,args=swift_proxy_server,args=--path,args=/healthcheck,args={{ ansible_ssh_host }},args=8080
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'swift_proxy_server_api_local_status', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["swift_proxy_server_api_local_status"] != 1) { return new AlarmStatus(CRITICAL, "API unavailable"); }' }
  user: root
  when: >
    inventory_hostname in groups['swift_proxy']

# Setup swift-proxy remote LB API healthcheck
- include: remote_setup.yml
  user: root
  vars:
    entity_name: "{{ lb_name }}"
    target_alias: "{{ maas_target_alias }}"
    check_type: remote.http
    check_name: lb_api_check_swift_proxy
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    monitoring_zones: "{{ maas_monitoring_zones }}"
    notification_plan: "{{ maas_notification_plan }}"
    scheme: "{{ maas_swift_proxy_scheme | default(maas_scheme)}}"
    ip_address: "{{ external_vip_address }}"
    port: 8080
    path: "/healthcheck"
    url: "{{ scheme }}://{{ ip_address }}:{{ port }}{{ path }}"
    alarm_name: lb_api_alarm_swift_proxy
    criteria: ":set consecutiveCount={{ maas_alarm_remote_consecutive_count }} if (metric['code'] != '200') { return new AlarmStatus(CRITICAL, 'API unavailable.'); }"
  when: >
    inventory_hostname == groups['swift_proxy'][0]

# Setup swift host local swift-recon checks
- include: local_setup.yml
  vars:
    check_name: swift_md5_check
    check_details: file=swift-recon.py,args=md5
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'swift_ring_md5_check', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["ring_errors"] > 0) { return new AlarmStatus(CRITICAL, "Ring md5sum Inconsistent"); }' }
      - { 'name': 'swift_conf_md5_check', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["swift_conf_errors"] > 0) { return new AlarmStatus(CRITICAL, "Swift conf md5sum inconsistent"); }' }
  user: root
  when: >
    inventory_hostname in groups['swift_hosts']

- include: local_setup.yml
  vars:
    check_name: swift_quarantine_check
    check_details: file=swift-recon.py,args=quarantine
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'swift_quarantine_object_failed', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["objects_failed"] > 5.0) { return new AlarmStatus(CRITICAL, "Swift Object Quarantine Percentage Above Threshold"); }' }
      - { 'name': 'swift_quarantine_object_avg', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["objects_avg"] > 25.0) { return new AlarmStatus(CRITICAL, "Swift Object Quarantine Average Above Threshold"); }' }
      - { 'name': 'swift_quarantine_account_failed', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["accounts_failed"] > 5.0) { return new AlarmStatus(CRITICAL, "Swift Account Quarantine Percentage Above Threshold"); }' }
      - { 'name': 'swift_quarantine_account_avg', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["accounts_avg"] > 25.0) { return new AlarmStatus(CRITICAL, "Swift Account Quarantine Average Above Threshold"); }' }
      - { 'name': 'swift_quarantine_container_failed', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["containers_failed"] > 5.0) { return new AlarmStatus(CRITICAL, "Swift Container Quarantine Percentage Above Threshold"); }' }
      - { 'name': 'swift_quarantine_container_avg', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["containers_avg"] > 25.0) { return new AlarmStatus(CRITICAL, "Swift Container Quarantine Average Above Threshold"); }' }
  user: root
  when: >
    inventory_hostname in groups['swift_hosts']

- include: local_setup.yml
  vars:
    check_name: swift_async_check
    check_details: file=swift-recon.py,args=async-pendings
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'swift_async_failure_check', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["async_failed"] > 5.0) { return new AlarmStatus(CRITICAL, "Swift Async Pending Failure Percentage Above Threshold"); }' }
      - { 'name': 'swift_async_avg_check', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["async_avg"] > 25.0) { return new AlarmStatus(CRITICAL, "Swift Async Pending Average above threshold"); }' }
  user: root
  when: >
    inventory_hostname in groups['swift_hosts']

- include: local_setup.yml
  vars:
    check_name: swift_object_replication_check
    check_details: file=swift-recon.py,args=--ring-type,args=object,args=replication
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'swift_object_replication_check', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["time_failed"] > 5.0) { return new AlarmStatus(CRITICAL, "Swift Object Replication Failure Percentage Above Threshold"); }' }
  user: root
  when: >
    inventory_hostname in groups['swift_obj']

- include: local_setup.yml
  vars:
    check_name: swift_account_replication_check
    check_details: file=swift-recon.py,args=--ring-type,args=account,args=replication
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'swift_account_replication_check', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["time_failed"] > 5.0) { return new AlarmStatus(CRITICAL, "Swift Account Replication Failure Percentage Above Threshold"); }' }
  user: root
  when: >
    inventory_hostname in groups['swift_acc']

- include: local_setup.yml
  vars:
    check_name: swift_container_replication_check
    check_details: file=swift-recon.py,args=--ring-type,args=container,args=replication
    check_period: "{{ maas_check_period }}"
    check_timeout: "{{ maas_check_timeout }}"
    alarms:
      - { 'name': 'swift_container_replication_check', 'criteria': ':set consecutiveCount={{ maas_alarm_local_consecutive_count }} if (metric["time_failed"] > 5.0) { return new AlarmStatus(CRITICAL, "Swift Container Replication Failure Percentage Above Threshold"); }' }
  user: root
  when: >
    inventory_hostname in groups['swift_cont']

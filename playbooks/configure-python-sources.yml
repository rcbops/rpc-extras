---
# Copyright 2017, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Configure the default python sources for RPC-O
  hosts: localhost
  environment: "{{ deployment_environment_variables | default({}) }}"
  connection: local
  user: root
  pre_tasks:
    - name: Ensure local facts directory exists
      file:
        dest: "/etc/ansible/facts.d"
        state: directory
        group: "root"
        owner: "root"
        mode:  "0755"
        recurse: no

    - name: initialize local facts
      ini_file:
        dest: "/etc/ansible/facts.d/rpc_openstack.fact"
        section: "rpc_artifacts"
        option: initialized
        value: true

    - name: Refresh local facts
      setup:
        filter: ansible_local
        gather_subset: "!all"
      tags:
        - always

    - name: Set the rpc-openstack variables
      set_fact:
        rpc_openstack: "{{ ansible_local['rpc_openstack']['rpc_artifacts'] }}"

    - name: Set the rpc-artifact variables
      set_fact:
        py_artifact_enabled: "{{ rpc_openstack['py_artifact_enabled'] }}"
      when:
        - rpc_openstack['py_artifact_enabled'] is defined
        - py_artifact_enabled is undefined

    - name: Set the rpc-artifact variables
      set_fact:
        apt_artifact_enabled: "{{ rpc_openstack['apt_artifact_enabled'] }}"
      when:
        - rpc_openstack['apt_artifact_enabled'] is defined
        - apt_artifact_enabled is undefined

    - name: Check for artifacts (wheels)
      uri:
        url: "{{ rpco_mirror_base_url }}/os-releases/{{ rpc_release }}/{{ repo_build_os_distro_version }}/MANIFEST.in"
        method: HEAD
      failed_when: false
      register: check_artifacts_wheels

    - name: Check for artifacts (git)
      uri:
        url: "{{ rpco_mirror_base_url }}/git-archives/{{ rpc_release }}/requirements.checksum"
        method: HEAD
      failed_when: false
      register: check_artifacts_git

    - name: Set artifacts enabled
      set_fact:
        py_artifact_found: "{{ (check_artifacts_wheels.status == 200) and (check_artifacts_git.status == 200) }}"

    - name: Set artifacts enabled
      set_fact:
        py_artifact_enabled: "{{ py_artifact_found | bool }}"
      when:
        - py_artifact_enabled is undefined

    - name: Check if artifacts are enabled but not found
      fail:
        msg: |
          The python artifacts are enabled but not found. The deployment has
          halted. Please check the artifacts repository is online and available
          before continuing.
      when:
        - py_artifact_enabled | bool
        - not py_artifact_found | bool
      tags:
        - always

    - name: Notify the Deployer
      debug:
        msg: >-
          ********************* NOTICE! *********************
          At this time there is no good way to override the repo-build process
          so that we can stash our python wheels into the repo container at build
          time without directly overriding the repo-build playbook. To make this
          work we're forcably linking the repo-build playbook to our own
          `stage-python-artifacts.yml`. Hopfully in the future we can simply
          define the code path in a more intellegent way.
          ********************* NOTICE! *********************
      when:
        - py_artifact_found | bool
        - py_artifact_enabled | bool

    - name: Pause for effect
      pause:
        seconds: 5
      when:
        - py_artifact_found | bool
        - py_artifact_enabled | bool

    - name: Link "repo-build.yml" to "stage-python-artifacts.yml"
      file:
        src: "{{ playbook_dir }}/stage-python-artifacts.yml"
        dest: /opt/openstack-ansible/playbooks/repo-build.yml
        force: true
        state: link
      when:
        - py_artifact_found | bool
        - py_artifact_enabled | bool
  roles:
    # We execute the pip_install role here to ensure that all
    # hosts have the correct rpco repo configured now that
    # /etc/apt/sources.list has been changed to no longer
    # include the updates repo. This assumes it's been executed
    # after the configure-apt-sources.yml playbook. If this option is
    # undefined this role will skip.
    - role: "pip_install"
      pip_lock_to_internal_repo: false
      internal_lb_vip_address: localhost
      pip_upstream_url: "{{ rpco_mirror_base_url }}/os-releases/{{ rpc_release }}/{{ repo_build_os_distro_version }}/get-pip.py"
      pip_install_upper_constraints: "{{ rpco_mirror_base_url }}/os-releases/{{ rpc_release }}/{{ repo_build_os_distro_version }}/requirements_absolute_requirements.txt"
      when:
        - py_artifact_found | bool
        - py_artifact_enabled | bool
        - apt_artifact_enabled | default(false) | bool

  post_tasks:
    - name: Set artifact local fact
      ini_file:
        dest: "/etc/ansible/facts.d/rpc_openstack.fact"
        section: "rpc_artifacts"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
      with_items:
        - { option: "py_artifact_enabled", value: "{{ py_artifact_enabled }}" }
        - { option: "py_artifact_found", value: "{{ py_artifact_found }}" }

  vars:
    ansible_python_interpreter: "/usr/bin/python"

  tags:
    - rpc

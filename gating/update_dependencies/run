#!/bin/bash -xe

# asdfa
## Update OSA SHA to head of stable/pike
# These var must be set per branch of RPC-Openstack
osa_branch=stable/pike
rpco_branch=${BRANCH:-master} # BRANCH injected by Jenkins.

# Env vars injected by Jenkins:
WORKSPACE="${WORKSPACE:-/opt}"

# Note for local testing: this script expects to be executed from the root
# of an rpco clone, checkout at master.

# Pull in the latest version of the rpc-artifacts using the submodule. Remove
# and revise this when the use of submodules has been terminated.
git submodule update --init --remote

# Get current head of osa
osa_dir="${WORKSPACE}/openstack-ansible"
git clone "https://github.com/openstack/openstack-ansible" ${osa_dir}
pushd ${osa_dir}
  git checkout $osa_branch
  osa_sha="$(git log -n 1 --format=%H)"
popd
sed -i "s|^export OSA_RELEASE.*|export OSA_RELEASE=\"\${OSA_RELEASE:-${osa_sha}}\"|g" scripts/functions.sh


## Update rpc-maas to latest tag
rpc_maas_dir="${WORKSPACE}/rpc-maas"
git clone https://github.com/rcbops/rpc-maas $rpc_maas_dir
pushd $rpc_maas_dir
  # the maas repo includes old tags eg v9.x.x and 9.x.x when the version
  #  at the time of writing is 1.x.x. All tags that include a character
  #  or that start with 9 or 10 are filtered out.
  latest_maas_tag="$(git tag -l |grep -v '[a-zA-Z]\|^\(9\.\|10\.\)' |sort -n |tail -n 1)"
popd
# Insert latest maas tag into rpcd/etc/openstack_deploy/user_rpco_variables_defaults.yml
#  Insert current SHA into functions.sh
sed -i '/^maas_release:/ c\
maas_release: "'${latest_maas_tag}'"' etc/openstack_deploy/group_vars/all/release.yml

# can't use derive-artifact-version.sh as that hardcodes the rpc repo path
extract_rpc_release(){
  awk '/^rpc_release/{print $2}' | tr -d '"'
}

update_rpc_release(){
  rc_branch_version="$(git show origin/${rc_branch}:etc/openstack_deploy/group_vars/all/release.yml \
                      | extract_rpc_release)"
  echo "rpc_release version from rc-branch (${rc_branch}): ${rc_branch_version}"

  current_branch_version="$(extract_rpc_release < etc/openstack_deploy/group_vars/all/release.yml)"
  echo "rpc_release version from current branch (${rpco_branch}): ${current_branch_version}"

  # Extract the required version info
  major_version=$( echo ${rc_branch_version} | cut -d. -f1 )
  minor_version=$( echo ${rc_branch_version} | cut -d. -f2 )
  patch_version=$( echo ${rc_branch_version} | cut -d. -f3 )

  # increment the minor version
  minor_version=$(( minor_version + 1 ))

  incremented_version="${major_version}.${minor_version}.${patch_version}"
  echo "Incremented rpc_release version: ${incremented_version}"

  sed -i "s/${current_branch_version}/${incremented_version}/" \
    etc/openstack_deploy/group_vars/all/release.yml
}

# Update rpc_release. The mainline branch should always be one version
# ahead of the rc branch, as the next rc branch will be cut from mainline
# post release.

# This update script will only ever run against a mainline branch, as
# dependencies should not change once an RC branch has been cut.

# Get RC branch version
rc_branch="${rpco_branch}-rc"
git fetch origin
if git show origin/${rc_branch}; then
  update_rpc_release
else
  echo "RC branch ${rc_branch} not found, skipping rpc_release version bump.
If there is no RC branch then the mainline branch is considered unreleased
and therefore the rpc_release value is left alone. It is still important
for the dependencies to be updated regularly though, so that part continues
to be done."
fi

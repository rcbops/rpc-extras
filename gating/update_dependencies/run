#!/bin/bash

# Set options to ensure easier debugging
# and failure on any problems encountered
set -euxo pipefail

# Find the absolute path to the directory this script
# is executed from.
export GATING_PATH="$(readlink -f $(dirname ${0}))"

# Set the base RPC-O directory which the functions use
export BASE_DIR="$(readlink -f ${GATING_PATH}/../..)"

# As get-rpc_release.py requires a yaml import, make
# sure that it is installed and available.
if ! python -c 'import yaml' &>/dev/null; then
  echo "Python YAML library not available. Installing it."
  apt-get install -y python-yaml
fi

# Source the functions
source "${BASE_DIR}/scripts/functions.sh"

# We need pip on the host in order to install the required
# SemVer library, so make sure it is installed and available.
if ! pip --version &>/dev/null; then
  echo "Pip not available. Installing it."
  apt-get install -y python-pip
fi

# Install the semver library to manipulate the
# rpc_release version strings
semver_version="2.7.9"
if [[ "$(pip --disable-pip-version-check freeze | grep semver)" != "semver==${semver_version}" ]]; then
  echo "Python SemVer library not available. Installing it."
  pip install semver==${semver_version}
fi

## Update OSA SHA to head of stable/pike
# These var must be set per branch of RPC-Openstack
rpco_branch="${BRANCH:-master}" # BRANCH injected by Jenkins.
rc_branch="${rpco_branch}-rc"

# Env vars injected by Jenkins:
WORKSPACE="${WORKSPACE:-/opt}"

# Note for local testing: this script expects to be executed from the root
# of an rpco clone, checkout at master.

# Pull in the latest version of the rpc-artifacts using the submodule. Remove
# and revise this when the use of submodules has been terminated.
git submodule update --init --remote

## Get current head of osa
# We clean up any existing directory to make
# testing simpler (re-executing this script)
# and to ensure we have a fresh clone.
osa_dir="${WORKSPACE}/openstack-ansible"
if [[ -e ${osa_dir} ]]; then
  rm -rf ${osa_dir}
fi
git clone "https://github.com/openstack/openstack-ansible" "${osa_dir}"
pushd "${osa_dir}"
  git checkout "${OSA_RELEASE}"
  export OSA_SHA="$(git log -n 1 --format=%H)"
popd

## Update rpc-maas to latest tag
# We clean up any existing directory to make
# testing simpler (re-executing this script)
# and to ensure we have a fresh clone.
rpc_maas_dir="${WORKSPACE}/rpc-maas"
if [[ -e ${rpc_maas_dir} ]]; then
  rm -rf ${rpc_maas_dir}
fi
git clone https://github.com/rcbops/rpc-maas "${rpc_maas_dir}"
pushd "${rpc_maas_dir}"
  # the maas repo includes old tags eg v9.x.x and 9.x.x when the version
  #  at the time of writing is 1.x.x. All tags that include a character
  #  or that start with 9 or 10 are filtered out.
  export MAAS_TAG="$(git tag -l |grep -v '[a-zA-Z]\|^\(9\.\|10\.\)' |sort -n |tail -n 1)"
popd

## Check what version is set in the RC branch

# We can only use this method once this file exists in the RC branch, so
# we have to implement the new method and a fall back to the old method.

new_file_to_fetch="origin/${rc_branch}:playbooks/vars/rpc-release.yml"
old_file_to_fetch="origin/${rc_branch}:etc/openstack_deploy/group_vars/all/release.yml"
release_data_file="${WORKSPACE}/rc-release-data.yml"

# new method
if git cat-file -e ${new_file_to_fetch} 2>/dev/null; then
  git show ${new_file_to_fetch} > ${release_data_file}
  export RC_BRANCH_VERSION=$(${BASE_DIR}/scripts/get-rpc_release.py -f ${release_data_file})

# old method
elif git cat-file -e ${old_file_to_fetch} 2>/dev/null; then
  git show ${old_file_to_fetch} > ${release_data_file}
  export RC_BRANCH_VERSION=$(awk '/^rpc_release/{print $2}' ${release_data_file} | tr -d '"')

else
  echo "RC branch ${rc_branch} not found, skipping rpc_release version bump.
If there is no RC branch then the mainline branch is considered unreleased and
therefore the rpc_release value is left alone. It is still important for the
dependencies to be updated regularly though, so that part continues to be done."
fi


# Execute role requirements file update
export ROLE_REQUIREMENTS_FILE="${BASE_DIR}/ansible-role-${RPC_PRODUCT_RELEASE}-requirements.yml"
${GATING_PATH}/role-requirements-update.py


# Execute the update of all the data
export RELEASE_FILE="${BASE_DIR}/playbooks/vars/rpc-release.yml"
${GATING_PATH}/release-update.py
